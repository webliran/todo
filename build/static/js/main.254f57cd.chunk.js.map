{"version":3,"sources":["components/TodoItem.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","info","todo","complete","id","updateComplete","a","fetch","method","res","json","getTodos","className","type","checked","onChange","Form","useState","todoText","setTodoText","addTodo","params","URLSearchParams","set","body","value","e","target","onClick","App","todos","setTodos","useEffect","map","elem","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2RAuBeA,MApBf,SAAkBC,GAAQ,IAAD,EACCA,EAAMC,KAAvBC,EADgB,EAChBA,KAAKC,EADW,EACXA,SACNC,EAAKJ,EAAMI,GAEXC,EAAc,uCAAG,WAAOD,GAAP,eAAAE,EAAA,sEACDC,MAAM,4CAAD,OAA6CH,GAAK,CACnEI,OAAQ,SAFK,cACbC,EADa,gBAIEA,EAAIC,OAJN,cAKjBV,EAAMW,WALW,2CAAH,sDAQlB,OACI,yBAAKC,UAAU,YACX,6BAAMV,GACN,6BAAK,2BAAOW,KAAK,WAAWC,QAASX,EAAUY,SAAU,kBAAMV,EAAeD,SCU3EY,MA1Bf,SAAchB,GAAQ,IAAD,EAEaiB,mBAAS,IAFtB,mBAEZC,EAFY,KAEFC,EAFE,KAIbC,EAAO,uCAAG,8BAAAd,EAAA,6DACJe,EAAS,IAAIC,iBACZC,IAAI,OAAOL,GAFR,SAIMX,MAAM,8BAA+B,CACjDC,OAAQ,OACRgB,KAAMH,IANA,cAINZ,EAJM,gBAQSA,EAAIC,OARb,cASVV,EAAMW,WATI,2CAAH,qDAYX,OACI,6BACI,8BACI,2BAAOE,KAAK,OAAOY,MAAOP,EAAUH,SAAU,SAAAW,GAAC,OAAIP,EAAYO,EAAEC,OAAOF,UACxE,4BAAQZ,KAAK,SAASe,QAAS,kBAAMR,MAArC,8D,MCUDS,MA3Bf,WAAgB,IAAD,EAEWZ,mBAAS,IAFpB,mBAERa,EAFQ,KAEDC,EAFC,KAGTpB,EAAQ,uCAAG,8BAAAL,EAAA,sEACGC,MAAM,8BADT,cACTE,EADS,gBAEKA,EAAIC,OAFT,OAEToB,EAFS,OAGbC,EAASD,GAHI,2CAAH,qDAUZ,OAJAE,qBAAU,WACRrB,MACC,IAGD,yBAAKC,UAAU,OACb,kBAAC,EAAD,CAAOD,SAAUA,IAEfmB,EAAMG,KAAI,SAACC,EAAMC,GACf,OACE,kBAAC,EAAD,CAAUA,IAAKA,EAAKlC,KAAMiC,EAAM9B,GAAI+B,EAAKxB,SAAUA,SCZ3CyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.254f57cd.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Todo.css';\r\n\r\nfunction TodoItem(props) {\r\n    let {todo,complete} = props.info;\r\n    let id = props.id;\r\n\r\n    let updateComplete = async (id) => {\r\n        let res = await fetch(`http://localhost:5000/todo/update-status/${id}`,{\r\n            method: 'POST'\r\n        });\r\n        let isDone = await res.json();\r\n        props.getTodos();\r\n    }\r\n    \r\n    return (\r\n        <div className=\"TodoItem\">\r\n            <div>{todo}</div>\r\n            <div><input type=\"checkbox\" checked={complete} onChange={() => updateComplete(id)} /></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoItem;\r\n","import React, { useState } from 'react';\r\n\r\nfunction Form(props) {\r\n\r\n    let [todoText, setTodoText] = useState('');\r\n\r\n    let addTodo = async () => {\r\n        const params = new URLSearchParams();\r\n        params.set(\"todo\",todoText)\r\n\r\n        let res = await fetch(`http://localhost:5000/todo/`, {\r\n            method: 'POST',\r\n            body: params\r\n        });\r\n        let isDone = await res.json();\r\n        props.getTodos();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form>\r\n                <input type=\"text\" value={todoText} onChange={e => setTodoText(e.target.value)} />\r\n                <button type=\"button\" onClick={() => addTodo()}>הוסף משימה</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form;","import React, { useEffect, useState } from 'react';\nimport TodoItem from './components/TodoItem';\nimport Form from './components/Form';\nimport './App.css';\n\nfunction App() {\n\n  let [todos, setTodos] = useState([]);\n  let getTodos = async () => {\n    let res = await fetch('http://localhost:5000/todo');\n    let todos = await res.json();\n    setTodos(todos);\n  }\n\n  useEffect(() => {\n    getTodos();\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <Form  getTodos={getTodos} />\n      {\n        todos.map((elem, key) => {\n          return (\n            <TodoItem key={key} info={elem} id={key} getTodos={getTodos} />\n          )\n        })\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}